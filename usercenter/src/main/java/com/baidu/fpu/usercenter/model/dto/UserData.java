/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.fpu.usercenter.model.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-18")
public class UserData implements org.apache.thrift.TBase<UserData, UserData._Fields>, java.io.Serializable, Cloneable, Comparable<UserData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserData");

  private static final org.apache.thrift.protocol.TField FBU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fbuId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRCID_FIELD_DESC = new org.apache.thrift.protocol.TField("prcid", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CASH_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("cashCard", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumber", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PHOTO_FIELD_DESC = new org.apache.thrift.protocol.TField("photo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ID_PHOTO_FIELD_DESC = new org.apache.thrift.protocol.TField("idPhoto", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("createBy", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField UPDATE_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("updateBy", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserDataTupleSchemeFactory());
  }

  public long fbuId; // required
  public long status; // required
  public String name; // required
  public String prcid; // required
  public String cashCard; // required
  public String phoneNumber; // required
  public String photo; // optional
  public String idPhoto; // optional
  public String password; // optional
  public String createBy; // optional
  public String createTime; // optional
  public String updateBy; // optional
  public String updateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FBU_ID((short)1, "fbuId"),
    STATUS((short)2, "status"),
    NAME((short)3, "name"),
    PRCID((short)4, "prcid"),
    CASH_CARD((short)5, "cashCard"),
    PHONE_NUMBER((short)6, "phoneNumber"),
    PHOTO((short)7, "photo"),
    ID_PHOTO((short)8, "idPhoto"),
    PASSWORD((short)9, "password"),
    CREATE_BY((short)10, "createBy"),
    CREATE_TIME((short)11, "createTime"),
    UPDATE_BY((short)12, "updateBy"),
    UPDATE_TIME((short)13, "updateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FBU_ID
          return FBU_ID;
        case 2: // STATUS
          return STATUS;
        case 3: // NAME
          return NAME;
        case 4: // PRCID
          return PRCID;
        case 5: // CASH_CARD
          return CASH_CARD;
        case 6: // PHONE_NUMBER
          return PHONE_NUMBER;
        case 7: // PHOTO
          return PHOTO;
        case 8: // ID_PHOTO
          return ID_PHOTO;
        case 9: // PASSWORD
          return PASSWORD;
        case 10: // CREATE_BY
          return CREATE_BY;
        case 11: // CREATE_TIME
          return CREATE_TIME;
        case 12: // UPDATE_BY
          return UPDATE_BY;
        case 13: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FBUID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PHOTO,_Fields.ID_PHOTO,_Fields.PASSWORD,_Fields.CREATE_BY,_Fields.CREATE_TIME,_Fields.UPDATE_BY,_Fields.UPDATE_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FBU_ID, new org.apache.thrift.meta_data.FieldMetaData("fbuId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRCID, new org.apache.thrift.meta_data.FieldMetaData("prcid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CASH_CARD, new org.apache.thrift.meta_data.FieldMetaData("cashCard", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phoneNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHOTO, new org.apache.thrift.meta_data.FieldMetaData("photo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_PHOTO, new org.apache.thrift.meta_data.FieldMetaData("idPhoto", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_BY, new org.apache.thrift.meta_data.FieldMetaData("createBy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_BY, new org.apache.thrift.meta_data.FieldMetaData("updateBy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserData.class, metaDataMap);
  }

  public UserData() {
  }

  public UserData(
    long fbuId,
    long status,
    String name,
    String prcid,
    String cashCard,
    String phoneNumber)
  {
    this();
    this.fbuId = fbuId;
    setFbuIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.name = name;
    this.prcid = prcid;
    this.cashCard = cashCard;
    this.phoneNumber = phoneNumber;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserData(UserData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.fbuId = other.fbuId;
    this.status = other.status;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPrcid()) {
      this.prcid = other.prcid;
    }
    if (other.isSetCashCard()) {
      this.cashCard = other.cashCard;
    }
    if (other.isSetPhoneNumber()) {
      this.phoneNumber = other.phoneNumber;
    }
    if (other.isSetPhoto()) {
      this.photo = other.photo;
    }
    if (other.isSetIdPhoto()) {
      this.idPhoto = other.idPhoto;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetCreateBy()) {
      this.createBy = other.createBy;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateBy()) {
      this.updateBy = other.updateBy;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
  }

  public UserData deepCopy() {
    return new UserData(this);
  }

  @Override
  public void clear() {
    setFbuIdIsSet(false);
    this.fbuId = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.name = null;
    this.prcid = null;
    this.cashCard = null;
    this.phoneNumber = null;
    this.photo = null;
    this.idPhoto = null;
    this.password = null;
    this.createBy = null;
    this.createTime = null;
    this.updateBy = null;
    this.updateTime = null;
  }

  public long getFbuId() {
    return this.fbuId;
  }

  public UserData setFbuId(long fbuId) {
    this.fbuId = fbuId;
    setFbuIdIsSet(true);
    return this;
  }

  public void unsetFbuId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FBUID_ISSET_ID);
  }

  /** Returns true if field fbuId is set (has been assigned a value) and false otherwise */
  public boolean isSetFbuId() {
    return EncodingUtils.testBit(__isset_bitfield, __FBUID_ISSET_ID);
  }

  public void setFbuIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FBUID_ISSET_ID, value);
  }

  public long getStatus() {
    return this.status;
  }

  public UserData setStatus(long status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public UserData setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getPrcid() {
    return this.prcid;
  }

  public UserData setPrcid(String prcid) {
    this.prcid = prcid;
    return this;
  }

  public void unsetPrcid() {
    this.prcid = null;
  }

  /** Returns true if field prcid is set (has been assigned a value) and false otherwise */
  public boolean isSetPrcid() {
    return this.prcid != null;
  }

  public void setPrcidIsSet(boolean value) {
    if (!value) {
      this.prcid = null;
    }
  }

  public String getCashCard() {
    return this.cashCard;
  }

  public UserData setCashCard(String cashCard) {
    this.cashCard = cashCard;
    return this;
  }

  public void unsetCashCard() {
    this.cashCard = null;
  }

  /** Returns true if field cashCard is set (has been assigned a value) and false otherwise */
  public boolean isSetCashCard() {
    return this.cashCard != null;
  }

  public void setCashCardIsSet(boolean value) {
    if (!value) {
      this.cashCard = null;
    }
  }

  public String getPhoneNumber() {
    return this.phoneNumber;
  }

  public UserData setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  public void unsetPhoneNumber() {
    this.phoneNumber = null;
  }

  /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneNumber() {
    return this.phoneNumber != null;
  }

  public void setPhoneNumberIsSet(boolean value) {
    if (!value) {
      this.phoneNumber = null;
    }
  }

  public String getPhoto() {
    return this.photo;
  }

  public UserData setPhoto(String photo) {
    this.photo = photo;
    return this;
  }

  public void unsetPhoto() {
    this.photo = null;
  }

  /** Returns true if field photo is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoto() {
    return this.photo != null;
  }

  public void setPhotoIsSet(boolean value) {
    if (!value) {
      this.photo = null;
    }
  }

  public String getIdPhoto() {
    return this.idPhoto;
  }

  public UserData setIdPhoto(String idPhoto) {
    this.idPhoto = idPhoto;
    return this;
  }

  public void unsetIdPhoto() {
    this.idPhoto = null;
  }

  /** Returns true if field idPhoto is set (has been assigned a value) and false otherwise */
  public boolean isSetIdPhoto() {
    return this.idPhoto != null;
  }

  public void setIdPhotoIsSet(boolean value) {
    if (!value) {
      this.idPhoto = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public UserData setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getCreateBy() {
    return this.createBy;
  }

  public UserData setCreateBy(String createBy) {
    this.createBy = createBy;
    return this;
  }

  public void unsetCreateBy() {
    this.createBy = null;
  }

  /** Returns true if field createBy is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateBy() {
    return this.createBy != null;
  }

  public void setCreateByIsSet(boolean value) {
    if (!value) {
      this.createBy = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public UserData setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateBy() {
    return this.updateBy;
  }

  public UserData setUpdateBy(String updateBy) {
    this.updateBy = updateBy;
    return this;
  }

  public void unsetUpdateBy() {
    this.updateBy = null;
  }

  /** Returns true if field updateBy is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateBy() {
    return this.updateBy != null;
  }

  public void setUpdateByIsSet(boolean value) {
    if (!value) {
      this.updateBy = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public UserData setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FBU_ID:
      if (value == null) {
        unsetFbuId();
      } else {
        setFbuId((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PRCID:
      if (value == null) {
        unsetPrcid();
      } else {
        setPrcid((String)value);
      }
      break;

    case CASH_CARD:
      if (value == null) {
        unsetCashCard();
      } else {
        setCashCard((String)value);
      }
      break;

    case PHONE_NUMBER:
      if (value == null) {
        unsetPhoneNumber();
      } else {
        setPhoneNumber((String)value);
      }
      break;

    case PHOTO:
      if (value == null) {
        unsetPhoto();
      } else {
        setPhoto((String)value);
      }
      break;

    case ID_PHOTO:
      if (value == null) {
        unsetIdPhoto();
      } else {
        setIdPhoto((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case CREATE_BY:
      if (value == null) {
        unsetCreateBy();
      } else {
        setCreateBy((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_BY:
      if (value == null) {
        unsetUpdateBy();
      } else {
        setUpdateBy((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FBU_ID:
      return Long.valueOf(getFbuId());

    case STATUS:
      return Long.valueOf(getStatus());

    case NAME:
      return getName();

    case PRCID:
      return getPrcid();

    case CASH_CARD:
      return getCashCard();

    case PHONE_NUMBER:
      return getPhoneNumber();

    case PHOTO:
      return getPhoto();

    case ID_PHOTO:
      return getIdPhoto();

    case PASSWORD:
      return getPassword();

    case CREATE_BY:
      return getCreateBy();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_BY:
      return getUpdateBy();

    case UPDATE_TIME:
      return getUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FBU_ID:
      return isSetFbuId();
    case STATUS:
      return isSetStatus();
    case NAME:
      return isSetName();
    case PRCID:
      return isSetPrcid();
    case CASH_CARD:
      return isSetCashCard();
    case PHONE_NUMBER:
      return isSetPhoneNumber();
    case PHOTO:
      return isSetPhoto();
    case ID_PHOTO:
      return isSetIdPhoto();
    case PASSWORD:
      return isSetPassword();
    case CREATE_BY:
      return isSetCreateBy();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_BY:
      return isSetUpdateBy();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserData)
      return this.equals((UserData)that);
    return false;
  }

  public boolean equals(UserData that) {
    if (that == null)
      return false;

    boolean this_present_fbuId = true;
    boolean that_present_fbuId = true;
    if (this_present_fbuId || that_present_fbuId) {
      if (!(this_present_fbuId && that_present_fbuId))
        return false;
      if (this.fbuId != that.fbuId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_prcid = true && this.isSetPrcid();
    boolean that_present_prcid = true && that.isSetPrcid();
    if (this_present_prcid || that_present_prcid) {
      if (!(this_present_prcid && that_present_prcid))
        return false;
      if (!this.prcid.equals(that.prcid))
        return false;
    }

    boolean this_present_cashCard = true && this.isSetCashCard();
    boolean that_present_cashCard = true && that.isSetCashCard();
    if (this_present_cashCard || that_present_cashCard) {
      if (!(this_present_cashCard && that_present_cashCard))
        return false;
      if (!this.cashCard.equals(that.cashCard))
        return false;
    }

    boolean this_present_phoneNumber = true && this.isSetPhoneNumber();
    boolean that_present_phoneNumber = true && that.isSetPhoneNumber();
    if (this_present_phoneNumber || that_present_phoneNumber) {
      if (!(this_present_phoneNumber && that_present_phoneNumber))
        return false;
      if (!this.phoneNumber.equals(that.phoneNumber))
        return false;
    }

    boolean this_present_photo = true && this.isSetPhoto();
    boolean that_present_photo = true && that.isSetPhoto();
    if (this_present_photo || that_present_photo) {
      if (!(this_present_photo && that_present_photo))
        return false;
      if (!this.photo.equals(that.photo))
        return false;
    }

    boolean this_present_idPhoto = true && this.isSetIdPhoto();
    boolean that_present_idPhoto = true && that.isSetIdPhoto();
    if (this_present_idPhoto || that_present_idPhoto) {
      if (!(this_present_idPhoto && that_present_idPhoto))
        return false;
      if (!this.idPhoto.equals(that.idPhoto))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_createBy = true && this.isSetCreateBy();
    boolean that_present_createBy = true && that.isSetCreateBy();
    if (this_present_createBy || that_present_createBy) {
      if (!(this_present_createBy && that_present_createBy))
        return false;
      if (!this.createBy.equals(that.createBy))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateBy = true && this.isSetUpdateBy();
    boolean that_present_updateBy = true && that.isSetUpdateBy();
    if (this_present_updateBy || that_present_updateBy) {
      if (!(this_present_updateBy && that_present_updateBy))
        return false;
      if (!this.updateBy.equals(that.updateBy))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fbuId = true;
    list.add(present_fbuId);
    if (present_fbuId)
      list.add(fbuId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_prcid = true && (isSetPrcid());
    list.add(present_prcid);
    if (present_prcid)
      list.add(prcid);

    boolean present_cashCard = true && (isSetCashCard());
    list.add(present_cashCard);
    if (present_cashCard)
      list.add(cashCard);

    boolean present_phoneNumber = true && (isSetPhoneNumber());
    list.add(present_phoneNumber);
    if (present_phoneNumber)
      list.add(phoneNumber);

    boolean present_photo = true && (isSetPhoto());
    list.add(present_photo);
    if (present_photo)
      list.add(photo);

    boolean present_idPhoto = true && (isSetIdPhoto());
    list.add(present_idPhoto);
    if (present_idPhoto)
      list.add(idPhoto);

    boolean present_password = true && (isSetPassword());
    list.add(present_password);
    if (present_password)
      list.add(password);

    boolean present_createBy = true && (isSetCreateBy());
    list.add(present_createBy);
    if (present_createBy)
      list.add(createBy);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_updateBy = true && (isSetUpdateBy());
    list.add(present_updateBy);
    if (present_updateBy)
      list.add(updateBy);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFbuId()).compareTo(other.isSetFbuId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFbuId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fbuId, other.fbuId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrcid()).compareTo(other.isSetPrcid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrcid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prcid, other.prcid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashCard()).compareTo(other.isSetCashCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashCard, other.cashCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoneNumber()).compareTo(other.isSetPhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumber, other.phoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoto()).compareTo(other.isSetPhoto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.photo, other.photo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdPhoto()).compareTo(other.isSetIdPhoto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdPhoto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idPhoto, other.idPhoto);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateBy()).compareTo(other.isSetCreateBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createBy, other.createBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateBy()).compareTo(other.isSetUpdateBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateBy, other.updateBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserData(");
    boolean first = true;

    sb.append("fbuId:");
    sb.append(this.fbuId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("prcid:");
    if (this.prcid == null) {
      sb.append("null");
    } else {
      sb.append(this.prcid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashCard:");
    if (this.cashCard == null) {
      sb.append("null");
    } else {
      sb.append(this.cashCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phoneNumber:");
    if (this.phoneNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.phoneNumber);
    }
    first = false;
    if (isSetPhoto()) {
      if (!first) sb.append(", ");
      sb.append("photo:");
      if (this.photo == null) {
        sb.append("null");
      } else {
        sb.append(this.photo);
      }
      first = false;
    }
    if (isSetIdPhoto()) {
      if (!first) sb.append(", ");
      sb.append("idPhoto:");
      if (this.idPhoto == null) {
        sb.append("null");
      } else {
        sb.append(this.idPhoto);
      }
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetCreateBy()) {
      if (!first) sb.append(", ");
      sb.append("createBy:");
      if (this.createBy == null) {
        sb.append("null");
      } else {
        sb.append(this.createBy);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateBy()) {
      if (!first) sb.append(", ");
      sb.append("updateBy:");
      if (this.updateBy == null) {
        sb.append("null");
      } else {
        sb.append(this.updateBy);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'fbuId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (prcid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'prcid' was not present! Struct: " + toString());
    }
    if (cashCard == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cashCard' was not present! Struct: " + toString());
    }
    if (phoneNumber == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'phoneNumber' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserDataStandardSchemeFactory implements SchemeFactory {
    public UserDataStandardScheme getScheme() {
      return new UserDataStandardScheme();
    }
  }

  private static class UserDataStandardScheme extends StandardScheme<UserData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FBU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fbuId = iprot.readI64();
              struct.setFbuIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.status = iprot.readI64();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRCID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.prcid = iprot.readString();
              struct.setPrcidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CASH_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cashCard = iprot.readString();
              struct.setCashCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phoneNumber = iprot.readString();
              struct.setPhoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PHOTO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.photo = iprot.readString();
              struct.setPhotoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ID_PHOTO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idPhoto = iprot.readString();
              struct.setIdPhotoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createBy = iprot.readString();
              struct.setCreateByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UPDATE_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateBy = iprot.readString();
              struct.setUpdateByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetFbuId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fbuId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FBU_ID_FIELD_DESC);
      oprot.writeI64(struct.fbuId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI64(struct.status);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.prcid != null) {
        oprot.writeFieldBegin(PRCID_FIELD_DESC);
        oprot.writeString(struct.prcid);
        oprot.writeFieldEnd();
      }
      if (struct.cashCard != null) {
        oprot.writeFieldBegin(CASH_CARD_FIELD_DESC);
        oprot.writeString(struct.cashCard);
        oprot.writeFieldEnd();
      }
      if (struct.phoneNumber != null) {
        oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.phoneNumber);
        oprot.writeFieldEnd();
      }
      if (struct.photo != null) {
        if (struct.isSetPhoto()) {
          oprot.writeFieldBegin(PHOTO_FIELD_DESC);
          oprot.writeString(struct.photo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.idPhoto != null) {
        if (struct.isSetIdPhoto()) {
          oprot.writeFieldBegin(ID_PHOTO_FIELD_DESC);
          oprot.writeString(struct.idPhoto);
          oprot.writeFieldEnd();
        }
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createBy != null) {
        if (struct.isSetCreateBy()) {
          oprot.writeFieldBegin(CREATE_BY_FIELD_DESC);
          oprot.writeString(struct.createBy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateBy != null) {
        if (struct.isSetUpdateBy()) {
          oprot.writeFieldBegin(UPDATE_BY_FIELD_DESC);
          oprot.writeString(struct.updateBy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserDataTupleSchemeFactory implements SchemeFactory {
    public UserDataTupleScheme getScheme() {
      return new UserDataTupleScheme();
    }
  }

  private static class UserDataTupleScheme extends TupleScheme<UserData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.fbuId);
      oprot.writeI64(struct.status);
      oprot.writeString(struct.name);
      oprot.writeString(struct.prcid);
      oprot.writeString(struct.cashCard);
      oprot.writeString(struct.phoneNumber);
      BitSet optionals = new BitSet();
      if (struct.isSetPhoto()) {
        optionals.set(0);
      }
      if (struct.isSetIdPhoto()) {
        optionals.set(1);
      }
      if (struct.isSetPassword()) {
        optionals.set(2);
      }
      if (struct.isSetCreateBy()) {
        optionals.set(3);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(4);
      }
      if (struct.isSetUpdateBy()) {
        optionals.set(5);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetPhoto()) {
        oprot.writeString(struct.photo);
      }
      if (struct.isSetIdPhoto()) {
        oprot.writeString(struct.idPhoto);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetCreateBy()) {
        oprot.writeString(struct.createBy);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateBy()) {
        oprot.writeString(struct.updateBy);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.fbuId = iprot.readI64();
      struct.setFbuIdIsSet(true);
      struct.status = iprot.readI64();
      struct.setStatusIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.prcid = iprot.readString();
      struct.setPrcidIsSet(true);
      struct.cashCard = iprot.readString();
      struct.setCashCardIsSet(true);
      struct.phoneNumber = iprot.readString();
      struct.setPhoneNumberIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.photo = iprot.readString();
        struct.setPhotoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.idPhoto = iprot.readString();
        struct.setIdPhotoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createBy = iprot.readString();
        struct.setCreateByIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.updateBy = iprot.readString();
        struct.setUpdateByIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

}

