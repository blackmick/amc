/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baidu.fpu.usercenter.model.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-24")
public class queryRequest implements org.apache.thrift.TBase<queryRequest, queryRequest._Fields>, java.io.Serializable, Cloneable, Comparable<queryRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRequest");

  private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHANNEL_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelUid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHANNEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_INSERT_FIELD_DESC = new org.apache.thrift.protocol.TField("isInsert", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new queryRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new queryRequestTupleSchemeFactory());
  }

  public String channelId; // required
  public String channelUid; // required
  public String channelType; // required
  public boolean isInsert; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHANNEL_ID((short)1, "channelId"),
    CHANNEL_UID((short)2, "channelUid"),
    CHANNEL_TYPE((short)3, "channelType"),
    IS_INSERT((short)4, "isInsert");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHANNEL_ID
          return CHANNEL_ID;
        case 2: // CHANNEL_UID
          return CHANNEL_UID;
        case 3: // CHANNEL_TYPE
          return CHANNEL_TYPE;
        case 4: // IS_INSERT
          return IS_INSERT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISINSERT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_UID, new org.apache.thrift.meta_data.FieldMetaData("channelUid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("channelType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_INSERT, new org.apache.thrift.meta_data.FieldMetaData("isInsert", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRequest.class, metaDataMap);
  }

  public queryRequest() {
  }

  public queryRequest(
    String channelId,
    String channelUid,
    String channelType,
    boolean isInsert)
  {
    this();
    this.channelId = channelId;
    this.channelUid = channelUid;
    this.channelType = channelType;
    this.isInsert = isInsert;
    setIsInsertIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public queryRequest(queryRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetChannelId()) {
      this.channelId = other.channelId;
    }
    if (other.isSetChannelUid()) {
      this.channelUid = other.channelUid;
    }
    if (other.isSetChannelType()) {
      this.channelType = other.channelType;
    }
    this.isInsert = other.isInsert;
  }

  public queryRequest deepCopy() {
    return new queryRequest(this);
  }

  @Override
  public void clear() {
    this.channelId = null;
    this.channelUid = null;
    this.channelType = null;
    setIsInsertIsSet(false);
    this.isInsert = false;
  }

  public String getChannelId() {
    return this.channelId;
  }

  public queryRequest setChannelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  public void unsetChannelId() {
    this.channelId = null;
  }

  /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelId() {
    return this.channelId != null;
  }

  public void setChannelIdIsSet(boolean value) {
    if (!value) {
      this.channelId = null;
    }
  }

  public String getChannelUid() {
    return this.channelUid;
  }

  public queryRequest setChannelUid(String channelUid) {
    this.channelUid = channelUid;
    return this;
  }

  public void unsetChannelUid() {
    this.channelUid = null;
  }

  /** Returns true if field channelUid is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelUid() {
    return this.channelUid != null;
  }

  public void setChannelUidIsSet(boolean value) {
    if (!value) {
      this.channelUid = null;
    }
  }

  public String getChannelType() {
    return this.channelType;
  }

  public queryRequest setChannelType(String channelType) {
    this.channelType = channelType;
    return this;
  }

  public void unsetChannelType() {
    this.channelType = null;
  }

  /** Returns true if field channelType is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelType() {
    return this.channelType != null;
  }

  public void setChannelTypeIsSet(boolean value) {
    if (!value) {
      this.channelType = null;
    }
  }

  public boolean isIsInsert() {
    return this.isInsert;
  }

  public queryRequest setIsInsert(boolean isInsert) {
    this.isInsert = isInsert;
    setIsInsertIsSet(true);
    return this;
  }

  public void unsetIsInsert() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISINSERT_ISSET_ID);
  }

  /** Returns true if field isInsert is set (has been assigned a value) and false otherwise */
  public boolean isSetIsInsert() {
    return EncodingUtils.testBit(__isset_bitfield, __ISINSERT_ISSET_ID);
  }

  public void setIsInsertIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISINSERT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHANNEL_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        setChannelId((String)value);
      }
      break;

    case CHANNEL_UID:
      if (value == null) {
        unsetChannelUid();
      } else {
        setChannelUid((String)value);
      }
      break;

    case CHANNEL_TYPE:
      if (value == null) {
        unsetChannelType();
      } else {
        setChannelType((String)value);
      }
      break;

    case IS_INSERT:
      if (value == null) {
        unsetIsInsert();
      } else {
        setIsInsert((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHANNEL_ID:
      return getChannelId();

    case CHANNEL_UID:
      return getChannelUid();

    case CHANNEL_TYPE:
      return getChannelType();

    case IS_INSERT:
      return Boolean.valueOf(isIsInsert());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHANNEL_ID:
      return isSetChannelId();
    case CHANNEL_UID:
      return isSetChannelUid();
    case CHANNEL_TYPE:
      return isSetChannelType();
    case IS_INSERT:
      return isSetIsInsert();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof queryRequest)
      return this.equals((queryRequest)that);
    return false;
  }

  public boolean equals(queryRequest that) {
    if (that == null)
      return false;

    boolean this_present_channelId = true && this.isSetChannelId();
    boolean that_present_channelId = true && that.isSetChannelId();
    if (this_present_channelId || that_present_channelId) {
      if (!(this_present_channelId && that_present_channelId))
        return false;
      if (!this.channelId.equals(that.channelId))
        return false;
    }

    boolean this_present_channelUid = true && this.isSetChannelUid();
    boolean that_present_channelUid = true && that.isSetChannelUid();
    if (this_present_channelUid || that_present_channelUid) {
      if (!(this_present_channelUid && that_present_channelUid))
        return false;
      if (!this.channelUid.equals(that.channelUid))
        return false;
    }

    boolean this_present_channelType = true && this.isSetChannelType();
    boolean that_present_channelType = true && that.isSetChannelType();
    if (this_present_channelType || that_present_channelType) {
      if (!(this_present_channelType && that_present_channelType))
        return false;
      if (!this.channelType.equals(that.channelType))
        return false;
    }

    boolean this_present_isInsert = true;
    boolean that_present_isInsert = true;
    if (this_present_isInsert || that_present_isInsert) {
      if (!(this_present_isInsert && that_present_isInsert))
        return false;
      if (this.isInsert != that.isInsert)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_channelId = true && (isSetChannelId());
    list.add(present_channelId);
    if (present_channelId)
      list.add(channelId);

    boolean present_channelUid = true && (isSetChannelUid());
    list.add(present_channelUid);
    if (present_channelUid)
      list.add(channelUid);

    boolean present_channelType = true && (isSetChannelType());
    list.add(present_channelType);
    if (present_channelType)
      list.add(channelType);

    boolean present_isInsert = true;
    list.add(present_isInsert);
    if (present_isInsert)
      list.add(isInsert);

    return list.hashCode();
  }

  @Override
  public int compareTo(queryRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelUid()).compareTo(other.isSetChannelUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelUid, other.channelUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelType()).compareTo(other.isSetChannelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelType, other.channelType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsInsert()).compareTo(other.isSetIsInsert());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsInsert()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isInsert, other.isInsert);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("queryRequest(");
    boolean first = true;

    sb.append("channelId:");
    if (this.channelId == null) {
      sb.append("null");
    } else {
      sb.append(this.channelId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelUid:");
    if (this.channelUid == null) {
      sb.append("null");
    } else {
      sb.append(this.channelUid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelType:");
    if (this.channelType == null) {
      sb.append("null");
    } else {
      sb.append(this.channelType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isInsert:");
    sb.append(this.isInsert);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (channelId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'channelId' was not present! Struct: " + toString());
    }
    if (channelUid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'channelUid' was not present! Struct: " + toString());
    }
    if (channelType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'channelType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'isInsert' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class queryRequestStandardSchemeFactory implements SchemeFactory {
    public queryRequestStandardScheme getScheme() {
      return new queryRequestStandardScheme();
    }
  }

  private static class queryRequestStandardScheme extends StandardScheme<queryRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, queryRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelId = iprot.readString();
              struct.setChannelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHANNEL_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelUid = iprot.readString();
              struct.setChannelUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHANNEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelType = iprot.readString();
              struct.setChannelTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_INSERT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isInsert = iprot.readBool();
              struct.setIsInsertIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIsInsert()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isInsert' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, queryRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(struct.channelId);
        oprot.writeFieldEnd();
      }
      if (struct.channelUid != null) {
        oprot.writeFieldBegin(CHANNEL_UID_FIELD_DESC);
        oprot.writeString(struct.channelUid);
        oprot.writeFieldEnd();
      }
      if (struct.channelType != null) {
        oprot.writeFieldBegin(CHANNEL_TYPE_FIELD_DESC);
        oprot.writeString(struct.channelType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_INSERT_FIELD_DESC);
      oprot.writeBool(struct.isInsert);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class queryRequestTupleSchemeFactory implements SchemeFactory {
    public queryRequestTupleScheme getScheme() {
      return new queryRequestTupleScheme();
    }
  }

  private static class queryRequestTupleScheme extends TupleScheme<queryRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, queryRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.channelId);
      oprot.writeString(struct.channelUid);
      oprot.writeString(struct.channelType);
      oprot.writeBool(struct.isInsert);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, queryRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.channelId = iprot.readString();
      struct.setChannelIdIsSet(true);
      struct.channelUid = iprot.readString();
      struct.setChannelUidIsSet(true);
      struct.channelType = iprot.readString();
      struct.setChannelTypeIsSet(true);
      struct.isInsert = iprot.readBool();
      struct.setIsInsertIsSet(true);
    }
  }

}

